@function to-length($value, $unit) {
	$units: ('px': 1px, 'cm': 1cm, 'mm': 1mm, '%': 1%, 'ch': 1ch, 'pc': 1pc, 'in': 1in, 'em': 1em, 'rem': 1rem, 'pt': 1pt, 'ex': 1ex, 'vw': 1vw, 'vh': 1vh, 'vmin': 1vmin, 'vmax': 1vmax);

	@if not index(map-keys($units), $unit) {
		$_: log('Invalid unit `#{$unit}`.');
	}

	@return $value * map-get($units, $unit);
}

@function to-number($value) {
	@if type-of($value) == 'number' {
		@return $value;
	} @else if type-of($value) != 'string' {
		$_: log('Value for `to-number` should be a number or a string.');
	}

	$result: 0;
	$digits: 0;
	$minus: str-slice($value, 1, 1) == '-';
	$numbers: ('0': 0, '1': 1, '2': 2, '3': 3, '4': 4, '5': 5, '6': 6, '7': 7, '8': 8, '9': 9);

	@for $i from if($minus, 2, 1) through str-length($value) {
		$character: str-slice($value, $i, $i);

		@if not (index(map-keys($numbers), $character) or $character == '.') {
			@return to-length(if($minus, -$result, $result), str-slice($value, $i))
		}

		@if $character == '.' {
			$digits: 1;
		} @else if $digits == 0 {
			$result: $result * 10 + map-get($numbers, $character);
		} @else {
			$digits: $digits * 10;
			$result: $result + map-get($numbers, $character) / $digits;
		}
	}

	@return if($minus, -$result, $result);
}

@mixin sprite-width($sprite) {
	width: #{nth($sprite, 5)};
}

@mixin sprite-height($sprite) {
	height: #{nth($sprite, 6)};
}

@mixin sprite-top-half-margin($sprite) {
	$height: to-number(nth($sprite, 6)) / -2;
	margin-top: $height;
}

@mixin sprite-left-half-margin($sprite) {
	$width: to-number(nth($sprite, 5)) / -2;
	margin-left: $width;
}

@mixin sprite-position($sprite) {
	$sprite-offset-x: #{nth($sprite, 3)};
	$sprite-offset-y: #{nth($sprite, 4)};
	background-position: $sprite-offset-x $sprite-offset-y;
}

@mixin sprite-image($sprite) {
	$sprite-image: nth($sprite, 9);
	background-image: url('images/#{$sprite-image}');
}

@mixin sprite($sprite) {
	@include sprite-image($sprite);
	@include sprite-position($sprite);
	@include sprite-width($sprite);
	@include sprite-height($sprite);
}