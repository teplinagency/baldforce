@import "sprites-svg";

/// Base font size on the `<body>` element
/// @type Number (unit)
//$mq-base-font-size: 16px !default;

/// Convert pixels to ems
//@function mq-px2em($px, $base-font-size: $mq-base-font-size) {
//	@if unitless($px) {
//		@warn "Assuming #{$px} to be in pixels, attempting to convert it into pixels.";
//		@return mq-px2em($px + 0px); // That may fail.
//	} @else if unit($px) == em {
//		@return $px;
//	}
//	@return ($px / $base-font-size) * 1em;
//}

/// Set the `sprite-svg` map
$sprite-svg: map-get($icons, sprite-svg) !default;

/// Retrive an attributes value for a specific icon in the sprite map
/// @param {string} $icon - The name of the icon
/// @param {string} $attr - The attribute you wish to retrieve (e.g. width)
@function sprite-attr($icon, $attr) {
	$newIcon: map-get($icons, $icon);
	@if $newIcon == null {
		@warn "Can't find an icon with the name #{$icon}";
	}
	@return map-get($newIcon, $attr);
}

/// Create a map with the specified icon of attributes
/// @param {string} $icon - The name of the icon
@function icon-attr($icon) {
	$attr: (
					width: sprite-attr($icon, width),
					height: sprite-attr($icon, height),
					x: sprite-attr($icon, backgroundX),
					y: sprite-attr($icon, backgroundY)
	);

	@return $attr;
}

/// Get the width of an icon in em
/// @param {string} $icon - The name of the icon
//@function icon_width($icon) {
//	@return mq-px2em(sprite-attr($icon, width));
//}

/// Get the height of an icon in em
/// @param {string} $icon - The name of the icon
//@function icon_height($icon) {
//	@return mq-px2em(sprite-attr($icon, height));
//}

/// Assign the correct SVG background image and dimensions to the element
%sprite-svg {
	display: inline-block;
	background-image: url(map-get($sprite-svg, svgPath));
	background-size: (map-get($sprite-svg, width)) (map-get($sprite-svg, height));
	//background-size: mq-px2e(map-get($sprite-svg, width)) mq-px2em(map-get($sprite-svg, height));
}


/// Add a sprite PNG icon for browsers with the `$ieSprite` class with px for positioning
/// @param {string} $icon - The name of the icon
/// @param {string} $type [all] - The properties wanted (can be `all`, `size` or `bg`).
/// - `all` ensures the icon has the background, position and size.
/// - `size` is just for dimensions
/// - `bg` just  applies the backgrounds to an element
/// @example scss - Usage
/// .class {
/// 	@include sprite(arrow);
/// 	&:hover {
/// 		@include sprite(arrowDown, bg)
/// 	}
/// }

@mixin sprite-svg($icon, $type: all) {
	@if $type == all {
		// Shares the backgrounds
		@extend %sprite-svg;
	}

	$iconMap: icon-attr($icon);

	// Outputs dimensions in em
	@if $type == all or $type == size {
		width: (map-get($iconMap, width));
		height: (map-get($iconMap, height));
	}

	// Outputs background position in em
	@if $type == all or $type == bg {
		//background-position: (map-get($iconMap, x) - 5) (map-get($iconMap, y) - 5);//padding 5px (gulpfile)
		background-position: (map-get($iconMap, x)) (map-get($iconMap, y));//padding 5px (gulpfile)
	}
}



